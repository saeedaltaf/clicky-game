{"version":3,"sources":["components/NavBar/NavBar.js","components/Title/Title.js","components/Cards/Cards.js","components/Image/Image.js","components/Wrapper/Wrapper.js","App.js","registerServiceWorker.js","index.js"],"names":["NavBar","props","className","score","topScore","Title","Cards","children","Image","onClick","sortImages","id","clicked","src","data-clicked","alt","Wrapper","App","state","image","imageOrder","console","log","alert","forEach","img","index","setState","sort","Math","random","this","map","key","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.d61f93b1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./NavBar.css\";\r\n\r\nconst NavBar = props => (\r\n    <div className=\"navBarRow\">\r\n        {/* <div className=\"nav-item col-4 my-auto\"> <p className = \"navbarBrand my-auto\">Princess Clicky Game</p></div> */}\r\n        <div className=\"scores\"> Score: {props.score} | Top Score: {props.topScore}</div>\r\n    </div>\r\n\r\n);\r\n\r\nexport default NavBar;","import React from 'react';\r\nimport \"./Title.css\"\r\n\r\n\r\nconst Title = props => (\r\n    <div className=\"jumbotron\">\r\n        <div className=\"jumbotron-title\">\r\n            <h1 className=\"display-4 text-center\">Clicky Game</h1>\r\n            <div>&nbsp;</div>\r\n            <h2 className=\"text-center\">Instructions: Click on any image to earn points, but don't click on any more than once! </h2>\r\n        </div>\r\n    </div>\r\n);\r\nexport default Title;","import React from 'react';\r\nimport \"./Cards.css\"\r\n\r\nconst Cards = props => (\r\n    <div className=\"cards\">\r\n        <div className=\"flexGrid\">{props.children}</div>\r\n    </div>\r\n);\r\n\r\nexport default Cards;","import React from 'react';\r\nimport \"./Image.css\"\r\n\r\nconst Image = props => (\r\n    <div className=\"imageCard\">\r\n        <div className=\"img-container\">\r\n            <img onClick={() => props.sortImages(props.id, props.clicked)}\r\n                id={props.id}\r\n                src={props.src}\r\n                data-clicked={props.clicked}\r\n                alt=\"PImage\" />\r\n        </div>\r\n    </div>\r\n\r\n);\r\n\r\nexport default Image;","import React from 'react';\r\nimport './Wrapper.css';\r\n\r\n\r\nconst Wrapper = props => <div className=\"container-fluid wrapper\">{props.children}</div>;\r\n\r\nexport default Wrapper;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport NavBar from './components/NavBar';\nimport Title from './components/Title';\nimport Cards from './components/Cards';\nimport Image from './components/Image';\nimport Wrapper from './components/Wrapper';\n\n\nclass App extends Component {\n  state = {\n    image: [\n      {\n        id: 1,\n        image: \"./assets/images/arsenal.gif\",\n        clicked: false\n      },\n      {\n        id: 2,\n        image: \"./assets/images/aston.png\",\n        clicked: false\n      },\n      {\n        id: 3,\n        image: \"./assets/images/brighton log.png\",\n        clicked: false\n      },\n      {\n        id: 4,\n        image: \"./assets/images/burnley.png\",\n        clicked: false\n      },\n      {\n        id: 5,\n        image: \"./assets/images/chelsea.png\",\n        clicked: false\n      },\n      {\n        id: 6,\n        image: \"./assets/images/everton.png\",\n        clicked: false\n      },\n      {\n        id: 7,\n        image: \"./assets/images/liecester.png\",\n        clicked: false\n      },\n      {\n        id: 8,\n        image: \"./assets/images/liverpool.png\",\n        clicked: false\n      },\n      {\n        id: 9,\n        image: \"./assets/images/mancity.png\",\n        clicked: false\n      },\n      {\n        id: 10,\n        image: \"./assets/images/manutd.png\",\n        clicked: false\n      },\n      {\n        id: 11,\n        image: \"./assets/images/newcastle.png\",\n        clicked: false\n      },\n      {\n        id: 12,\n        image: \"./assets/images/norwich.png\",\n        clicked: false\n      },\n      {\n        id: 13,\n        image: \"./assets/images/sheffield.png\",\n        clicked: false\n      },\n      {\n        id: 14,\n        image: \"./assets/images/southampton.png\",\n        clicked: false\n      },\n      {\n        id: 16,\n        image: \"./assets/images/watford.png\",\n        clicked: false\n      },\n      {\n        id: 17,\n        image: \"./assets/images/wolves.png\",\n        clicked: false\n      }\n    ],\n    score: 0,\n    topScore: 0\n  };\n\n  // Game Play //\n\n  // If the image is clicked on, the cards will shuffle //\n  sortImages = (id, clicked) => {\n    const imageOrder = this.state.image;\n\n    // If clicked twice - you lose! //\n    if (clicked) {\n      console.log(\"true\");\n      alert(\"Oh no! It looks like you've already clicked this one! Let's start the game over again.\")\n      imageOrder.forEach((img, index) => {\n        imageOrder[index].clicked = false;\n      });\n\n      return this.setState({\n        image: imageOrder.sort(() => Math.random() - 0.5),\n        topScore: this.state.score,\n        score: 0\n      })\n    }\n\n    // If click only one time, you win! //\n    else {\n      console.log(\"false\");\n      //   alert(\"Keep going! Let's see if you can beat your top score!\")\n      imageOrder.forEach((image, index) => {\n        if (id === image.id) {\n          imageOrder[index].clicked = true;\n        }\n      });\n      return this.setState({\n        image: imageOrder.sort(() => Math.random() - 0.5),\n        score: this.state.score + 1\n      })\n    }\n  };\n\n  render() {\n    return (\n      <Wrapper>\n\n        <NavBar score={this.state.score}\n          topScore={this.state.topScore}>\n\n          {/* <h3>Score={this.state.score}</h3>\n        <h3>topScore={this.state.topScore}</h3> */}\n        </NavBar>\n\n\n        <Title />\n\n        <Cards>\n          {this.state.image.map(image => (\n            <Image\n              key={image.id}\n              sortImages={this.sortImages}\n              id={image.id}\n              src={image.image}\n              clicked={image.clicked}\n            />\n          ))}\n        </Cards>\n\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();"],"sourceRoot":""}